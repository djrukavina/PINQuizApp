@page "/quiz"
@attribute [Authorize(Roles = "Administrator, User")]
@using Microsoft.AspNetCore.Authorization
@using QuizAppShared.Data
@using QuizAppUI.Components.Pages.Components
@using QuizAppUI.Components.Services
@inject QuestionsService questionsService


@if (showQuiz)
{
    <QuizComponent questions="questions" quizCategory="@selectedCategory" ResetQuiz="ResetQuiz"></QuizComponent>
}
else
{
    <div class="col">
        <div class="row col-lg-8 offset-lg-2 text-center">
            <div class="col-md-4">
                <p>Category:</p>
                <select @bind="selectedCategory" class="form-select">
                    <option value="" disabled>Select an option</option>
                    @foreach (var option in optionsCategory)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <p>Difficulty:</p>
                <select @bind="selectedDifficulty" class="form-select">
                    <option value="" disabled>Select an option</option>
                    @foreach (var option in optionsDifficulty)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <p>Number of questions:</p>
                <select @bind="selectedNumQuestion" class="form-select">
                    <option value="" disabled>Select an option</option>
                    @foreach (var option in optionsNumQuestion)
                    {
                        <option value="@option">@option</option>
                    }
                </select>
            </div>
        </div>

        <div class="row col-lg-4 offset-lg-4 text-center p-3">
            <button class="btn btn-primary btn-block my-1" @onclick="GetQuiz">Get Quiz</button>
        </div>
    </div>
}


@code
{
    private List<Question> questions = new List<Question>();
    private bool showQuiz { get; set; } = false;
    private string selectedCategory = "";
    private List<string> optionsCategory = QuizSettings.QuizCategories.Values.ToList();
    private string selectedDifficulty = "";
    private List<string> optionsDifficulty = QuizSettings.QuizDifficulty.Values.ToList();
    private string selectedNumQuestion = "";
    private List<string> optionsNumQuestion = new List<string> { "5", "10", "20" };

    private async void GetQuiz()
    {
        if (selectedCategory != "" && selectedDifficulty != "" && selectedNumQuestion != "")
        {
            questions = await questionsService.GetQuestionsForQuiz(selectedNumQuestion, selectedCategory, selectedDifficulty);
            showQuiz = true;
            StateHasChanged();
        }
    }
    private void ResetQuiz()
    {
        showQuiz = false;
        StateHasChanged();
    }
}