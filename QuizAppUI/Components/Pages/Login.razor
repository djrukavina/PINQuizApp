@page "/login"
@using QuizAppShared.Data
@using QuizAppUI.Components.Authentication
@inject ValidatedUserService validatedUserService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>


@code
{
    private class Model
    {
        public string UserName { get; set; }
        public string Password{ get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        ValidatedUser userAccount = await validatedUserService.GetUserByNamePassword(model.UserName, model.Password);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid Username or Password!");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName,
            Role = userAccount.Role
        });
        navManager.NavigateTo("/", true);
    }
}
